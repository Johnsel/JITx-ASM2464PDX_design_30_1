#use-added-syntax(jitx)
defpackage ASM001/board:
  import core
  import jitx
  import jitx/commands
  import jitx/parts
  import jsl/layerstack

  import maybe-utils
  import jsl

  import jlc-pcb/stackups/materials



doc: \<DOC>
The pcb-routing-structure(s) below are just examples of the routing structures that need to be maintained
in the project code because they are dependant on the stack-up and other factors.
<DOC>
public pcb-routing-structure se_50 :
  name = "50 Ohm single-ended"
  layer-constraints(Top) :
    trace-width = 0.15    ; mm
    clearance = 0.15     ; mm
    velocity = 0.19e12   ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz
    neck-down = NeckDown(
      trace-width = 0.156
      clearance = 0.1
    )

  layer-constraints(Bottom) :
    trace-width = 0.15    ; mm
    clearance = 0.15         ; mm
    velocity = 0.19e12   ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz
    neck-down = NeckDown(
      trace-width = 0.156
      clearance = 0.1
    )



doc: \<DOC>
The pcb-differential-routing-structure template below is an example of a differential-routing-structure needed
by different protocols. This pcb-differential-routing-structure will be applied to the differential traces
in the targeted bus by using the helper function `<bus>-apply-routing-structure()`.
It should also reference a single ended routing structure for the uncoupled region.
@param trace-impedance Target impedance. Accepted values are 85, 90, and 100 ohm.
<DOC>
public pcb-differential-routing-structure diff (trace-impedance:Toleranced|Double):
  name = "Differential Impedance - Select Values"
  val ti = match(trace-impedance):
    (t:Toleranced): typ(t)
    (d:Double): d
  val tw = switch(ti) :
    85.0  : 0.1400
    90.0 : 0.1475
    100.0 : 0.1510
  ; whatever layers are to be used for routing the differential pairs (defined by the user)
  layer-constraints(Top) :
    trace-width  = tw       ; mm
    pair-spacing = tw / 1.2 ; mm
    clearance    = 0.150    ; mm
    velocity = 0.19e12      ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz

  layer-constraints(LayerIndex(1, Top)) :
    trace-width  = tw       ; mm
    pair-spacing = 2.0 * tw ; mm
    clearance    = 0.300    ; mm
    velocity = 0.19e12      ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz

  layer-constraints(LayerIndex(1, Bottom)) :
    trace-width  = tw       ; mm
    pair-spacing = 2.0 * tw ; mm
    clearance    = 0.300    ; mm
    velocity = 0.19e12      ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz

  layer-constraints(Bottom) :
    trace-width  = tw       ; mm
    pair-spacing = tw / 1.2 ; mm
    clearance    = 0.150    ; mm
    velocity = 0.19e12      ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz


  uncoupled-region = se_50


doc: \<DOC>
The pcb-routing-structure(s) below are just examples of the routing structures that need to be maintained
in the project code because they are dependant on the stack-up and other factors.
<DOC>
public pcb-routing-structure se-50 (neckdown:Maybe<NeckDown> = None()) :
  name = "50 Ohm single-ended"
  layer-constraints(Top) :
    trace-width = 0.15    ; mm
    clearance = 0.15     ; mm
    velocity = 0.19e12   ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz
    neck-down = NeckDown(
      trace-width = 0.156
      clearance = 0.1
    )



  layer-constraints(Bottom) :
    trace-width = 0.15    ; mm
    clearance = 0.15         ; mm
    velocity = 0.19e12   ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz
    neck-down = NeckDown(
      trace-width = 0.156
      clearance = 0.1
    )



doc: \<DOC>
Multi-layer (6+) via with extra cost + 3.
This via definition uses the preferred +0.15mm
for the pad diameter which JLC-PCB recommends
<DOC>
public pcb-via tented-in-pad-via-cost-preferred:
  name = "Multi-Layer tented via-in-pad Via - Cost + 3"
  start = Top
  stop = Bottom
  diameter = 0.3
  hole-diameter = 0.2
  type = MechanicalDrill
  via-in-pad = true
  tented = true

doc: \<DOC>
@brief Parametric via generator for laser-drilled vias
This function creates vias based on the input arguments
@param via-start the layer that the via starts on
@param via-stop the layer that the via ends on
For other via types and arguments, please
consult: https://docs.jitx.com/reference/statements/viastmt/heading.html
<DOC>

public pcb-via gen-via (vip:True|False, via-start:LayerIndex via-stop:LayerIndex via-name:String) :
  name = via-name
  start = via-start
  stop = via-stop
  diameter = 0.200
  hole-diameter = 0.100
  type = LaserDrill
  via-in-pad = vip

public val default-TH = gen-via(false, LayerIndex(0,Top), LayerIndex(5,Bottom), "th") ; Full stackup

; Standard through-hole via (no extra cost)
public val std-via = jlc-pcb/stackups/vias/std-via-preferred

; Smaller vias with increasing costs
public val via-cost1 = jlc-pcb/stackups/vias/multi-via-cost+1-preferred
public val via-cost2 = jlc-pcb/stackups/vias/multi-via-cost+2-preferred
public val via-cost3 = jlc-pcb/stackups/vias/multi-via-cost+3-preferred
public val filled-vip-via = tented-in-pad-via-cost-preferred

; Via for components that require via-in-pad
public val filled-via = jlc-pcb/stackups/vias/tented-filled-std-via


; Make all vias available to the design
public val available-vias = [
  filled-vip-via,               ; 0.30mm pad / 0.20mm hole
  via-cost3                 ; 0.30mm pad / 0.15mm hole
  std-via                   ; 0.45mm pad / 0.30mm hole
  filled-via                ; 0.45mm pad / 0.30mm hole (tented & filled)
  via-cost1                 ; 0.40mm pad / 0.25mm hole
  via-cost2                 ; 0.35mm pad / 0.20mm hole
]

; Default-vias to the design
public val default-vias = [
  filled-vip-via,               ; 0.30mm pad / 0.20mm hole
  via-cost3                 ; 0.30mm pad / 0.15mm hole
  std-via                   ; 0.45mm pad / 0.30mm hole
  filled-via                ; 0.45mm pad / 0.30mm hole (tented & filled)
  ; via-cost1                 ; 0.40mm pad / 0.25mm hole
  ; via-cost2                 ; 0.35mm pad / 0.20mm hole
]

public val stackup-gen = make-layer-stack("JLC06161H-3313", outers, soldermask = soldermask) where:
  val soldermask = Soldermask(0.019, SoldermaskMaterial)
  val cu-1oz = Copper(0.035)
  val cu-halfoz = Copper(0.0152)

  val core = FR4(0.55, name = "core")
  val prepreg-3313x1 = FR4(0.0994, name = "3313x1")
  val prepreg-2116x1 = FR4(0.1088, name = "2116x1")
  
  val outers = [
  [cu-1oz prepreg-3313x1],
  [cu-halfoz core ],
  [cu-halfoz prepreg-2116x1]
  ]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Routing Structures
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

val ext-velocity = phase-velocity((Er-3314 + 1.0) / 2.0)
val int-velocity = phase-velocity((Er-2116 + 1.0) / 2.0)

; public pcb-routing-structure se-50 (neckdown:Maybe<NeckDown> = None()):
;   name = "50Ω Single-Ended - CPWG - JLC06161H-3313"

;   ; This expects a ground ref plane on Top + 1 and Bottom - 1
;   val ext-se-50-ustrip = RoutingStructureLayerConstraints(
;     trace-width = 0.1565,
;     clearance = 0.3,
;     velocity = ext-velocity
;     insertion-loss = Dk-3314
;     neck-down = value-or-else(neckdown, {false})
;   )

;   ; This expects a ground ref plane on Top+2 and Bottom - 1
;   val int-3313-se-50-stripline = RoutingStructureLayerConstraints(
;     trace-width = 0.1425,
;     clearance = 0.3,
;     velocity = int-velocity
;     insertion-loss = Dk-3314
;     neck-down = value-or-else(neckdown, {false})
;   )


; ; This expects a ground ref plane on Top+2 and Top+3
;   val int-2116-se-50-stripline = RoutingStructureLayerConstraints(
;     trace-width = 0.1318,
;     clearance = 0.3,
;     velocity = int-velocity
;     insertion-loss = Dk-2116
;     neck-down = value-or-else(neckdown, {false})
;   )

;   layer-constraints(Top) = ext-se-50-ustrip
;   layer-constraints(Top + 1) = int-3313-se-50-stripline
;   layer-constraints(Top + 2) = int-2116-se-50-stripline
;   layer-constraints(Top + 3) = int-2116-se-50-stripline
;   layer-constraints(Top + 4) = int-3313-se-50-stripline
;   layer-constraints(Bottom) = ext-se-50-ustrip

public pcb-differential-routing-structure diff-100 (
  uncoupled:Maybe<RoutingStructure> = None()
  neckdown:Maybe<DifferentialNeckDown> = None()
  ):
  name = "100Ω Differential Pair - CPWG - JLC06161H-3313"

  ; This expects a ground ref plane on Top + 1
  val df-100-ustrip = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1057
    pair-spacing = 0.2
    clearance = 0.3
    velocity = ext-velocity
    insertion-loss = Dk-3314
    neck-down = value-or-else(neckdown, {false})
  )
  layer-constraints(Top) = df-100-ustrip
  layer-constraints(Bottom) = df-100-ustrip

  ; This expects a ground ref plane on Top and Top + 2 (or Bottom and Bottom - 2)
  val df-100-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1054
    pair-spacing = 0.2
    clearance = 0.3
    velocity = int-velocity
    insertion-loss = Dk-3314
    neck-down = value-or-else(neckdown, {false})
  )

  layer-constraints(Top + 1) = df-100-stripline
  layer-constraints(Top + 3) = df-100-stripline
  layer-constraints(Bottom - 1) = df-100-stripline


public pcb-differential-routing-structure diff-85 (
  uncoupled:Maybe<RoutingStructure> = None()
  neckdown:Maybe<DifferentialNeckDown> = None()
  ):
  name = "85Ω Differential Pair - CPWG - JLC06161H-3313"

  ; This expects a ground ref plane on Top + 1
  val df-85-ustrip = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1610
    pair-spacing = 0.15
    clearance = 0.3
    velocity = ext-velocity
    insertion-loss = Dk-3314
    neck-down = value-or-else(neckdown, {false})
  )

  layer-constraints(Top) = df-85-ustrip
  layer-constraints(Bottom) = df-85-ustrip
  
  ; This expects a ground ref plane on Top and Top + 1 (or Bottom and Bottom - 1)
  val df-85-3313-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1605
    pair-spacing = 0.15
    clearance = 0.3
    velocity = int-velocity
    insertion-loss = Dk-3314
    neck-down = value-or-else(neckdown, {false})
  )
    
  ; This expects a ground ref plane on Top and Top + 2 (or Bottom and Bottom - 2)
  val df-85-2216-stripline = DiffRoutingStructureLayerConstraints(
    trace-width = 0.1605
    pair-spacing = 0.15
    clearance = 0.3
    velocity = int-velocity
    insertion-loss = Dk-2116
    neck-down = value-or-else(neckdown, {false})
  )

  layer-constraints(Top + 2) = df-85-3313-stripline
  layer-constraints(Top + 4) = df-85-2216-stripline
  layer-constraints(Bottom - 2) = df-85-3313-stripline

public defn JLC06161H-3313 (vias:Tuple<Via> = default-vias) -> Substrate :
  Substrate(
    stackup = stackup-gen,
    vias = default-vias,
    single-ended = [
      50 => se-50,
    ]
    differential = [
      85 => diff-85,
      100 => diff-100,
    ]
  )

; doc: \<DOC>
; The pcb-differential-routing-structure template below is an example of a differential-routing-structure needed
; by different protocols. This pcb-differential-routing-structure will be applied to the differential traces
; in the targeted bus by using the helper function `<bus>-apply-routing-structure()`.
; It should also reference a single ended routing structure for the uncoupled region.
; @param trace-impedance Target impedance. Accepted values are 85, 90, and 100 ohm.
; <DOC>
; public pcb-differential-routing-structure diff (trace-impedance:Toleranced|Double):
;   name = "Differential Impedance - Select Values"
;   val ti = match(trace-impedance):
;     (t:Toleranced): typ(t)
;     (d:Double): d
;   val tw = switch(ti) :
;     85.0  : 0.1610
;     100.0 : 0.1057
;   layer-constraints(Top) :
;     trace-width  = tw       ; mm
;     pair-spacing = tw / 1.2 ; mm
;     clearance    = 0.150    ; mm
;     velocity = ext-velocity ; mm/s
;     insertion-loss = Dk-3314; db/mm @ 1GHz

;   layer-constraints(LayerIndex(1, Top)) :
;     trace-width  = tw       ; mm
;     pair-spacing = 2.0 * tw ; mm
;     clearance    = 0.300    ; mm
;     velocity = int-velocity ; mm/s
;     insertion-loss = Dk-3314; db/mm @ 1GHz

;   layer-constraints(LayerIndex(2, Top)) :
;     trace-width  = tw       ; mm
;     pair-spacing = 2.0 * tw ; mm
;     clearance    = 0.300    ; mm
;     velocity = int-velocity ; mm/s
;     insertion-loss = Dk-2116; db/mm @ 1GHz

;   layer-constraints(LayerIndex(2, Bottom)) :
;     trace-width  = tw       ; mm
;     pair-spacing = 2.0 * tw ; mm
;     clearance    = 0.300    ; mm
;     velocity = int-velocity ; mm/s
;     insertion-loss = Dk-2116; db/mm @ 1GHz        

;   layer-constraints(LayerIndex(1, Bottom)) :
;     trace-width  = tw       ; mm
;     pair-spacing = 2.0 * tw ; mm
;     clearance    = 0.300    ; mm
;     velocity = int-velocity     ; mm/s
;     insertion-loss = Dk-3314  ; db/mm @ 1GHz

;   layer-constraints(Bottom) :
;     trace-width  = tw       ; mm
;     pair-spacing = tw / 1.2 ; mm
;     clearance    = 0.150    ; mm
;     velocity = ext-velocity ; mm/s
;     insertion-loss = Dk-3314; db/mm @ 1GHz

  ; uncoupled-region = se-50()
