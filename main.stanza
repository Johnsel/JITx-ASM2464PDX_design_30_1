; Generated by JITX 3.25.0
#use-added-syntax(jitx)
defpackage ASM001/main :
  import core
  import collections
  import jitx
  import jitx/commands
  import jitx/parts

  import jsl
  import jsl/bundles
  import jsl/protocols/usb
  import jsl/si/constraints
  import jsl/si/pairs
  import jsl/si/helpers
  import jsl/si/couplers
  import jsl/symbols/net-symbols

  import utils/time
  import ocdb/utils/checks
  import ocdb/utils/generic-components
  import ocdb/utils/generator-utils


  import ASM001/board
  import ASM001/helpers
  import ASM001/components/common

  import debug/test-points

; Define the shape/size of the board
val board-shape = RoundedRectangle(100.0, 100.0, 2.0)

; Module to run as a design
pcb-module ASM001-design :
  port gnd
  port vbus

  ; draw a version number and date on the board silkscreen
  val mydate:String = get-time-string("%Y-%m-%d")
  inst version-label  : ocdb/artwork/board-text/version-silkscreen(to-string("ASM2464PDX 4x M.2 board | Version 0.2 %_" % [get-time-string("%Y-%m-%d")])) ; make a version label text on silkscreen
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 5.0) on Bottom ; place the version label text at specified location

  ; setup logo
  inst logo : ocdb/artwork/jitx-logo/logo(10.0)
  place(logo) at loc(10.0, -5.0, 0.0) on Bottom
  
  val R-query = get-default-resistor-query()
  val C-query = get-default-capacitor-query()
  
  ;;;;; main power circuits
  inst power-circuit : ASM001/module/power/circuit
  place(power-circuit) at loc(-30.0, 35.0) on Top

  inst asm2464pdx : ASM001/components/Asmedia/ASM2464PDX/module
  place(asm2464pdx) at loc(0.0, 0.0, 0.0) on Top
  place(asm2464pdx.sw) at loc(0.0, 0.0, 0.0) on Top

  net VBUS (vbus power-circuit.vbus.V+ asm2464pdx.vbus)
  net VCCH (power-circuit.rail-3v3.V+ asm2464pdx.vcch); asm2464pdx.VCCA33)
  net VCCL (power-circuit.rail-1v9.V+ asm2464pdx.vccl)
  net VDD (power-circuit.rail-1v13.V+ asm2464pdx.vdd)
  net GND (gnd power-circuit.vbus.V- power-circuit.rail-3v3.V- power-circuit.rail-1v9.V- power-circuit.rail-1v13.V- asm2464pdx.gnd)

  inst vcca33-jumper : jumper()
  net VCCH_VCCA33 (VCCH vcca33-jumper.p[1]) ; internally hook up both 3.3v busses
  net VCCA33 (vcca33-jumper.p[2] asm2464pdx.vcca33) ; internally hook up both 3.3v busses

  geom(GND) :
    copper-pour(LayerIndex(1, Top), isolate = 0.127, rank = 1) =  board-shape
    copper-pour(LayerIndex(3, Top), isolate = 0.127, rank = 1) =  board-shape
    copper-pour(LayerIndex(4, Top), isolate = 0.127, rank = 1) =  board-shape
  
  inst usb4_type_c : ASM001/components/USB/USBTypeC/circuit
  ; require usb4_type_c_usb_c : usb-c(2) from usb4_type_c

  net (usb4_type_c.VBUS vbus)
  net (usb4_type_c.GND gnd)

  place(usb4_type_c.sw) at loc(-45.0, 15.0, 270.0) on Top

  inst W25Q32JVSSIQ : ASM001/components/Winbond/W25Q32JVSSIQ/module

  net (VCCH W25Q32JVSSIQ.VDD)
  net (GND W25Q32JVSSIQ.GND)

  ;;;;; generic component types
  val r_4k7 = create-resistor(R-query, 
                              case = ["0201", "0402"], 
                              resistance = 4.7e3) ; 4.7K ohm
  val r_100K = create-resistor(R-query, 
                              case = ["0201", "0402"], 
                              resistance = 100.0e3) ; 100K ohm

  val r_12k1 = create-resistor(R-query, 
                              case = ["0201", "0402"], 
                              resistance = 12.1e3,
                              tolerance = 0.01) ; 12.1K ohm

  val c_1uF50V = create-capacitor(C-query, 
                                case = ["0201", "0402"], 
                                capacitance = 1.0e-6,
                                rated-voltage = 50.0) ; 1uF, 50V


  ; ASM2464PDX config straps

  insert-pullup(asm2464pdx.sw.UART_TX, asm2464pdx.vcch,
                    elem-type = r_4k7,
                    inst-name? = to-string("uart_tx-R"),
                    make-public = true)

  ;; RST# RC pull-up
  insert-pullup(asm2464pdx.rst#, asm2464pdx.vcch,
                    elem-type = r_100K,
                    inst-name? = to-string("r_100K"),
                    make-public = true)

  insert-pulldown(asm2464pdx.rst#, GND,
                    elem-type = c_1uF50V,
                    inst-name? = to-string("c_1uF50V"),
                    make-public = true)

  insert-pulldown(asm2464pdx.urext, GND,
                    elem-type = r_12k1,
                    inst-name? = to-string("UREXT-R"),
                    make-public = true)

  
  insert-pulldown(asm2464pdx.test_en, GND,
                    elem-type = r_4k7,
                    inst-name? = to-string("TEST_EN-R"),
                    make-public = true)

  ;; ASM2464PDX SPI memory
  net (asm2464pdx.spi W25Q32JVSSIQ.spi)
  insert-pullup(W25Q32JVSSIQ.sw.SPI_IO2, asm2464pdx.vcch,
                  elem-type = r_4k7,
                  inst-name? = to-string("spi_wp#-R"),
                  make-public = true)

  insert-pullup(W25Q32JVSSIQ.sw.SPI_IO3, asm2464pdx.vcch,
                  elem-type = r_4k7,
                  inst-name? = to-string("spi_hold#-R"),
                  make-public = true)   

  ;; ASM2464PDX 25Mhz 18Pf crystal
  inst crystal_25mhz: ASM001/components/ABRACON/ABMM2-25_000MHZ-D1-T/component
  inst crystal_c : ASM001/components/KYOCERA-AVX/_04025A100FAT2A/component
  
  net (crystal_25mhz.GND0 GND)
  net (crystal_25mhz.GND1 GND)

  net (asm2464pdx.xi crystal_25mhz.p[1] crystal_c.p[1])
  net (asm2464pdx.xo crystal_25mhz.p[3] crystal_c.p[2])


  require asm2464pdx_usb-c : usb-c(2) from asm2464pdx

  net (usb4_type_c.VBUS asm2464pdx.vbus)
  net (usb4_type_c.GND asm2464pdx.gnd)

  net cc0 (usb4_type_c.USB-C.cc[0], asm2464pdx_usb-c.cc[0])
  net cc1 (usb4_type_c.USB-C.cc[1], asm2464pdx_usb-c.cc[1])

  net sbu0 (usb4_type_c.USB-C.sbu[0], asm2464pdx_usb-c.sbu[0])
  net sbu1 (usb4_type_c.USB-C.sbu[1], asm2464pdx_usb-c.sbu[1])

  inst esd-pair : dp-coupler(
      ASM001/components/Infineon/ESD132-B1-W0201-E6327/component,
      pre-pose = loc(0.0, 0.0, 90.0)
   )

  topo-net(asm2464pdx_usb-c.data => esd-pair.A => esd-pair.B => usb4_type_c.USB-C.data)

  ; By setting the signal end - then the routing structure application
  ; can apply to the entirety of the bus.
  set-signal-end(asm2464pdx_usb-c.data.P, usb4_type_c.USB-C.data.P)
  set-signal-end(asm2464pdx_usb-c.data.N, usb4_type_c.USB-C.data.N)
  
  ; According to USB4 System Design Guidelines
  val bleed-R = create-resistor(R-query, 
                              case = valid-smd-pkgs("0201"), 
                              resistance = Interval(200.0e3, 242.0e3) ; 220k ohm
                              )
  
  val rx-ac-C = create-capacitor(C-query, 
                                case = valid-smd-pkgs("0201"), 
                                capacitance = Interval(300.0e-9, 363.0e3)) ; 0.33uf

  val tx-ac-C = create-capacitor(C-query,
                                case = valid-smd-pkgs("0201"), 
                                capacitance = Interval(135.0e-9, 265.0e3)) ; 0.22uf

  
  ; USB-C CC pull-down resistors
  val cc-R = create-capacitor(C-query, capacitance = 2.2E-9, precision = (10 %), rated-voltage = 50.0, case = valid-smd-pkgs("0201")) ; 220 pf / 50V
  for i in indices(asm2464pdx_usb-c.cc) do:
    val n = to-string("CC%_-R" % [i])
    insert-pulldown(asm2464pdx_usb-c.cc[i], GND,
                  elem-type = cc-R,
                  inst-name? = n,
                  make-public = true)

  ; val usb-c-lanes = length(asm2464pdx_usb-c.lane)

  ; inst tx-bcap : dp-coupler(tx-ac-C)[usb-c-lanes]
  ; inst rx-bcap : dp-coupler(rx-ac-C)[usb-c-lanes]

  val lane-esd-cap = ASM001/components/Infineon/ESD132-B1-W0201-E6327/component

  ; inst lane-esd-tx : dp-coupler(lane-esd-cap, pre-pose = loc(0.0, 0.0, 90.0))[usb-c-lanes]
  ; inst lane-esd-rx : dp-coupler(lane-esd-cap, pre-pose = loc(0.0, 0.0, 90.0))[usb-c-lanes]
  
  ; for i in 0 to usb-c-lanes do:

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ESD
    
    
    ; require tx-esd:dual-pair from esd-lanes
    ; topo-pair(asm2464pdx_usb-c.lane[i].TX  usb4_type_c.USB-C.lane[i].TX  ) 

    ; require rx-esd:dual-pair from esd-lanes
    ; topo-pair(asm2464pdx_usb-c.lane[i].RX => lane-esd-rx[i] => rx-bcap[i] => usb4_type_c.USB-C.lane[i].RX) 

    

    
  ; Shield Termination
  inst shield-term : shield-termination(R-query, C-query)
  net (shield-term.SHIELD, usb4_type_c.SHIELD)
  net (shield-term.GND, GND)

  val ti-2 = usb-get-trace-impedance(USB2)
  val usb2-constraints = USB-Constraint(proto = USB2, route-struct = diff(ti-2))
  constrain-topology(asm2464pdx_usb-c.data => usb4_type_c.USB-C.data, usb2-constraints)

  val b-cap = block-cap(100.0e-9)

  val ti-4 = usb-get-trace-impedance(USB4)
  val usb4-constraints = USB-Constraint(proto = USB4, route-struct = diff(ti-4))
  val lane-constraint = LaneConstraint(usb4-constraints)
  for i in indices(asm2464pdx_usb-c.lane) do :
    within [src, dst] = constrain-topology(asm2464pdx_usb-c.lane[i] => usb4_type_c.USB-C.lane[i], lane-constraint):
      ; Here we construct the differential pair topology for the lane.
      ; The Lane consists of two diff-pairs - TX and RX
      inst rx-bcap : dp-coupler(b-cap)
      inst lane-esd-rx : dp-coupler(lane-esd-cap, pre-pose = loc(0.0, 0.0, 90.0))
      topo-pair(src.RX => rx-bcap => lane-esd-rx => dst.RX)

      ; RX bleed resistors
      insert-pulldown(dst.RX.P, GND, 
                      elem-type = bleed-R,
                      inst-name? = to-string("RX_P%_-R" % [i]), 
                      make-public = true)
      insert-pulldown(dst.RX.N, GND,
                      elem-type = bleed-R,
                      inst-name? = to-string("RX_N%_-R" % [i]),
                      make-public = true)

      ; TX bleed resistors
      insert-pulldown(dst.TX.P, GND,
                      elem-type = bleed-R,
                      inst-name? = to-string("TX_P%_-R" % [i]),
                      make-public = true)
      insert-pulldown(dst.TX.N, GND,
                      elem-type = bleed-R,
                      inst-name? = to-string("TX_N%_-R" % [i]),
                      make-public = true)

      ; The TX channel needs a blocking capacitor which we add with
      ;  the help of the `topo-pair` utility. This is like `topo-net`
      ;  but handles extracting the `dual-pair` require from the
      ;  `tx-bcap` for us.
      inst tx-bcap : dp-coupler(b-cap)
      inst lane-esd-tx : dp-coupler(lane-esd-cap, pre-pose = loc(0.0, 0.0, 90.0))
      topo-pair(src.TX => tx-bcap => lane-esd-tx => dst.TX)
    set-signal-end(asm2464pdx_usb-c.lane, usb4_type_c.USB-C.lane)
    
  ; inst header : header(2,1)

  ; make-test-points(usb4_type_c.sw.VBUS[0])
    
  ; ; Add Keepout for the USB interface.
  ; val pt-pd-map = port-to-pads(usb4_type_c.sw)
  ; val pds = for kvp in pt-pd-map seq-cat:
  ;   value(kvp)
  ; val b = bounds(pds, layer-spec = SolderMask(Top), expand-by = 0.25)
  ; val KO = KeepoutOverlay(to-Rectangle(b))
  ; val USB-KO-layers =
  ; make-keepout-overlay(
  ;   KO, usb4_type_c.sw,
  ;   ; I'm creating a keepout for all layers except the ground
  ;   ;  plane on `Top + 1` and Top + 2 so I can still route some power planes underneat.
  ;   layer-set = conductors-by-index(stackup(substrate), omits = [
  ;     Top + 1
  ;     Top + 2
  ;     ])
  ;   name = "USBC-Keepout"
  ;   )


  val version = PCIE-V4
  val trace-imped = pcie-get-trace-impedance(version)
  val cst = PCIe-Constraint(version, diff(trace-imped))

  val pcie-b-cap = block-cap(220.0e-9)

  ; Construct a typical connector setup
  ;  for a 4x 1 lane configuration. This means a
  ;  straight through `tx => bcap => tx` and `rx => rx`
  ;  configuration.


  
    
    
  inst m2_connector1 : ASM001/components/TE_1-2199230-6/module
  ; inst m2_connector2 : ASM001/components/TE_1-2199230-6/module
  ; inst m2_connector3 : ASM001/components/TE_1-2199230-6/module
  ; inst m2_connector4 : ASM001/components/TE_1-2199230-6/module
  
  require src-ep1 : pcie(1) from asm2464pdx
  ; require src-ep2 : pcie(1) from asm2464pdx
  ; require src-ep3 : pcie(1) from asm2464pdx
  ; require src-ep4 : pcie(1) from asm2464pdx

  require dst-ep1 : pcie(1) from m2_connector1
  ; require dst-ep2 : pcie(1) from m2_connector1
  ; require dst-ep3 : pcie(1) from m2_connector1
  ; require dst-ep4 : pcie(1) from m2_connector1
  
  net (m2_connector1.gnd GND) ;m2_connector2.gnd m2_connector3.gnd m2_connector4.gnd GND) 

  within [src1, dst1] = constrain-topology(src-ep1, dst-ep1, cst):
    inst tx-coupler1 : dp-coupler(pcie-b-cap)
    
    topo-pair(src1.data.lane[0].TX => tx-coupler1 => dst1.data.lane[0].TX)
    ; No Blocking Caps on the Receive side.
    topo-pair(src1.data.lane[0].RX => dst1.data.lane[0].RX)

    topo-net(src1.data.refclk => dst1.data.refclk)
    ; The control signals do not demand a topology so
    ;  we just use a straight net connection.
    net (src1.control, dst1.control)

  
  ; within [src2, dst2] = constrain-topology(src-ep2, dst-ep2, cst):
  ;   inst tx-coupler2 : dp-coupler(pcie-b-cap)
    
  ;   topo-pair(src2.data.lane[0].TX => tx-coupler2 => dst2.data.lane[0].TX)
  ;   ; No Blocking Caps on the Receive side.
  ;   topo-pair(src2.data.lane[0].RX => dst2.data.lane[0].RX)

  ;   topo-net(src2.data.refclk => dst2.data.refclk)
  ;   ; The control signals do not demand a topology so
  ;   ;  we just use a straight net connection.
  ;   net (src2.control, dst2.control)
  
  
  ; within [src3, dst3] = constrain-topology(src-ep3, dst-ep3, cst):
  ;   inst tx-coupler3 : dp-coupler(pcie-b-cap)
    
  ;   topo-pair(src3.data.lane[0].TX => tx-coupler3 => dst3.data.lane[0].TX)
  ;   ; No Blocking Caps on the Receive side.
  ;   topo-pair(src3.data.lane[0].RX => dst3.data.lane[0].RX)

  ;   topo-net(src3.data.refclk => dst3.data.refclk)
  ;   ; The control signals do not demand a topology so
  ;   ;  we just use a straight net connection.
  ;   net (src3.control, dst3.control)
  
  
  ; within [src4, dst4] = constrain-topology(src-ep4, dst-ep4, cst):
  ;   inst tx-coupler4 : dp-coupler(pcie-b-cap)
    
  ;   topo-pair(src4.data.lane[0].TX => tx-coupler4 => dst4.data.lane[0].TX)
  ;   ; No Blocking Caps on the Receive side.
  ;   topo-pair(src4.data.lane[0].RX => dst4.data.lane[0].RX)

  ;   topo-net(src4.data.refclk => dst4.data.refclk)
  ;   ; The control signals do not demand a topology so
  ;   ;  we just use a straight net connection.
  ;   net (src4.control, dst4.control)
  
  
  

  val m2_connector_count = 4
  
  val y-loc = [-36.0 - (to-double(0) * -24.0),(-36.0 - (to-double(1) * -24.0)),(-36.0 - (to-double(2) * -24.0)),(-36.0 - (to-double(3) * -24.0))]
  ; for i in 0 to m2_connector_count:
  ;  y-loc[i] = to-double()

  place(m2_connector1.sw) at loc(35.0, y-loc[0], 90.0) on Bottom      
  ; place(m2_connector2.sw) at loc(35.0, y-loc[1], 90.0) on Bottom      
  ; place(m2_connector3.sw) at loc(35.0, y-loc[2], 90.0) on Bottom      
  ; place(m2_connector4.sw) at loc(35.0, y-loc[3], 90.0) on Bottom      

  ; schematic symbols
  symbol(GND) = GND-SYMB
  symbol(VBUS) = PWR-SYMB
  symbol(VCCH) = PWR-SYMB
  symbol(VCCL) = PWR-SYMB
  symbol(VDD) = PWR-SYMB

; Set the :
;     design-name     - a directory with this name will be created in the "designs" directory
;     board           - a Board object representing the stackup, rules and board shape for a particular design
;     signal-shrink   - a distance in mm to pull back copper signals from the board edge
setup-design("ASM001-design", board-shape, signal-shrink = 0.5)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(ASM001-design)

; View the results
; take a look at the BOM that was generated
; view-bom(BOM-STD)
; examine the schematic that was auto-generated
view-schematic()
; view the board that was created
view-board()

; export-design()

